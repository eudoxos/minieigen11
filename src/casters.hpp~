#include"casters-funcs.hpp"

namespace pybind11{ namespace detail {
#if 0
	#define VECTOR_CASTER(VecT,VecT_) template<> struct type_caster<VecT>{ PYBIND11_TYPE_CASTER(VecT,VecT_); bool load(handle src, bool){ return VectorT_load_from_sequence(src,value); }};
	VECTOR_CASTER(VectorXr,"VectorX");
	VECTOR_CASTER(Vector6r,"Vector6");
	VECTOR_CASTER(Vector6i,"Vector6i");
	VECTOR_CASTER(Vector3r,"Vector3");
	VECTOR_CASTER(Vector3i,"Vector3i");
	VECTOR_CASTER(Vector2r,"Vector2");
	VECTOR_CASTER(Vector2i,"Vector2i");
#endif
	//template<> struct type_caster<VectorXr>{ PYBIND11_TYPE_CASTER(VectorXr,"VectorX"); bool load(handle src, bool){ return VectorT_load_from_sequence(src,value); }};
}};
#if 0
void expose_converters(){
	custom_VectorAnyAny_from_sequence<VectorXr>();
	custom_VectorAnyAny_from_sequence<Vector6r>();
	custom_VectorAnyAny_from_sequence<Vector6i>();
	custom_VectorAnyAny_from_sequence<Vector3r>();
	custom_VectorAnyAny_from_sequence<Vector3i>();
	custom_VectorAnyAny_from_sequence<Vector2r>();
	custom_VectorAnyAny_from_sequence<Vector2i>();
	custom_alignedBoxNr_from_seq<2>();
	custom_alignedBoxNr_from_seq<3>();
	custom_Quaternionr_from_axisAngle_or_angleAxis();

	custom_MatrixAnyAny_from_sequence<Matrix3r>();
	custom_MatrixAnyAny_from_sequence<Matrix6r>();
	custom_MatrixAnyAny_from_sequence<MatrixXr>();

	#ifdef _COMPLEX_SUPPORT
		custom_VectorAnyAny_from_sequence<Vector2cr>();
		custom_VectorAnyAny_from_sequence<Vector3cr>();
		custom_VectorAnyAny_from_sequence<Vector6cr>();
		custom_VectorAnyAny_from_sequence<VectorXcr>();
		custom_MatrixAnyAny_from_sequence<Matrix3cr>();
		custom_MatrixAnyAny_from_sequence<Matrix6cr>();
		custom_MatrixAnyAny_from_sequence<MatrixXcr>();
	#endif
}
#endif
